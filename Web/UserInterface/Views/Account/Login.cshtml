@model LoginViewModel
@section AccountHeader{
    <span class="inline-block pr-10">Don't have an account?</span>
    <a class="inline-block btn btn-info  btn-rounded btn-outline" href="~/Account/signup">Sign Up</a>
}
    <!-- Row -->
    <div class="table-struct full-width full-height">
        <div class="table-cell vertical-align-middle auth-form-wrap">
            <div class="auth-form  ml-auto mr-auto no-float">
                <div class="row">
                    <div class="col-sm-12 col-xs-12">
                        <div class="mb-30">
                            <h3 class="text-center txt-dark mb-10">Sign in to KSAA</h3>
                            <h6 class="text-center nonecase-font txt-grey">Enter your details below</h6>
                        </div>
                        <div class="form-wrap">
                            <form data-toggle="validator" role="form" action="#" method="post" id="LoginForm">
                                <div class="form-group">
                                    <label class="control-label mb-10" asp-for="Email"></label>
                                    <div class="input-group">
                                    <div class="input-group-addon"><i class="ti-email"></i></div> 
                                    <input type="text" class="form-control" data-required-error="Email is required" placeholder="Enter Email" required asp-for="Email">
                                </div>
                                    <div class="help-block with-errors"></div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label mb-10" asp-for="Password"></label>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="icon-lock"></i></div>
                                        <input type="password" class="form-control" data-required-error="Password is required" placeholder="Enter Password" required asp-for="Password">
                                    </div>
									<a class="capitalize-font txt-primary block mb-10 pull-right font-12" href="#" style="margin-top:15px !important">forgot password ?</a>
                                    <div class="help-block with-errors"></div>
                                </div>
								

                                @*<div class="form-group">
                            <div class="checkbox checkbox-primary pr-10 pull-left">
                            <input id="checkbox_2" required="" type="checkbox">
                            <label for="checkbox_2"> Keep me logged in</label>
                            </div>
                            <div class="clearfix"></div>
                            </div>*@
                                <div class="form-group text-center">
                                    <button type="submit" class="btn btn-info  btn-rounded" style="margin-top:20px !important">sign in</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /Row -->
    @section Scripts{
    <!-- Bootstrap Core JavaScript -->
    <script src="~/vendors/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="~/vendors/bower_components/bootstrap-validator/dist/validator.js"></script>

    <script type="text/javascript">
        (function($) {
    "use strict";

    $.fn.serializeToJSON = function(options) {

		var f = {
			settings: $.extend(true, {}, $.fn.serializeToJSON.defaults, options),

			getValue: function($input) {
				
				var value = $input.is(":radio") ? ($($input.selector+":checked").val() || null) : $input.val();

				if (this.settings.parseBooleans) {
					var boolValue = (value + "").toLowerCase();
					if (boolValue === "true" || boolValue === "false") {
						value = boolValue === "true";
					}
				}

				var floatCondition = this.settings.parseFloat.condition;
				if (floatCondition !== undefined && (
				    (typeof(floatCondition) === "string"   && $input.is(floatCondition)) ||
				    (typeof(floatCondition) === "function" && floatCondition($input)))) {

					value = this.settings.parseFloat.getInputValue($input);
					value = Number(value);
					
                    if (this.settings.parseFloat.nanToZero && isNaN(value)){
                        value = 0;
                    }                   
                }

				return value;
			},

			createProperty: function(o, value, names, $input) {
				var navObj = o;

				for (var i = 0; i < names.length; i++) {
					var currentName = names[i];

					if (i === names.length - 1) {								
						var isSelectMultiple = $input.is("select") && $input.prop("multiple");
						if (isSelectMultiple && value !== null){
							if (!Array.isArray(navObj[currentName])) {								
								navObj[currentName] = new Array();
							}
							navObj[currentName].push(value);
						} else {
							navObj[currentName] = value;
						}
					} else {
						var arrayKey = /\[\w+\]/g.exec(currentName);
						var isArray = arrayKey != null && arrayKey.length > 0;

						if (isArray) {
							currentName = currentName.substr(0, currentName.indexOf("["));

							if (this.settings.associativeArrays) {
								if (!navObj.hasOwnProperty(currentName)) {
									navObj[currentName] = {};
								}
							} else {
								if (!Array.isArray(navObj[currentName])) {
									navObj[currentName] = new Array();
								}
							}

							navObj = navObj[currentName];

							var keyName = arrayKey[0].replace(/[\[\]]/g, "");
							currentName = keyName;
						}

						if (!navObj.hasOwnProperty(currentName)) {
							navObj[currentName] = {};
						}

						navObj = navObj[currentName];
					}
				}
			},
			
			includeUncheckValues: function(selector, formAsArray){
				$(":radio", selector).each(function(){
					var isUncheckRadio = $("input[name=" + this.name + "]:radio:checked").length === 0;
					if (isUncheckRadio)
					{
						formAsArray.push({
							name: this.name,
							value: null
						});
					}
				});
				
				$("select[multiple]", selector).each(function(){					
					if ($(this).val() === null){
						formAsArray.push({
							name: this.name,
							value: null
						});
					}
				});
			},

			serializer: function(selector) {
				var self = this;
				
				var formAsArray = $(selector).serializeArray();
				this.includeUncheckValues(selector, formAsArray);

				var serializedObject = {}

				$.each(formAsArray, function(i, item) {
				    var $input = $(":input[name='" + item.name + "']", selector);
					
					var value = self.getValue($input);
					var names = item.name.split(".");					

					self.createProperty(serializedObject, value, names, $input);
				});

				return serializedObject;
			}
		};

		return f.serializer(this);
    };
	
	$.fn.serializeToJSON.defaults = {
        associativeArrays: true,
        parseBooleans: true,
		parseFloat: {
			condition: undefined,
			nanToZero: true,
			getInputValue: function($input){
				return $input.val().split(",").join("");
			}
		}
    };

})(jQuery);
        $('#LoginForm').validator().on('submit', function (e) {            
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
				e.preventDefault();
                $.ajax({
                    url:'/Account/Login',
                    method: 'POST',
					data: $(this).serializeToJSON(),
					success: function(data){
						window.location.href="/dashboard"
					},
					error: function(jqXHR, textStatus, error){
						$.toast({
							text: jqXHR.responseJSON.error_description=="invalid_username_or_password" ? "Invalid user name or password":"Internal Server Error",
							position: 'top-right',
							loaderBg: '#f8b32d',
							icon: 'error',
							hideAfter: 3500,
							stack: 6
						});
					}
                })
            }
        })
    </script>
    }